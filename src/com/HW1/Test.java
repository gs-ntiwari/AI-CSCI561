package com.HW1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

public class Test{
    public static void main(String[] args) {
        List<Coordinate> list = Utility.generateListCoordinatesFromString("0,0 1,1 2,2 3,3 4,4 5,5 6,5 7,6 8,6 9,7 10,7 11,8 12,9 13,10 14,11 15,12 16,13 17,14 18,15 19,16 20,17 21,18 22,18 23,19 23,20 24,21 24,22 25,23 26,24 27,25 28,26 29,27 30,28 31,29 31,30 32,31 33,32 34,33 35,34 36,35 37,36 38,37 39,38 40,39 40,40 41,41 42,42 43,43 43,44 43,45 44,46 45,47 46,48 47,49 48,50 49,51 50,51 51,52 52,53 53,54 54,55 55,56 56,57 57,58 58,59 59,60 60,61 61,62 62,63 63,64 64,65 65,66 66,67 67,68 68,69 69,70 70,71 71,72 72,73 73,74 74,75 75,76 76,77 77,77 78,78 79,78 80,79 81,80 82,81 83,82 84,82 85,83 86,84 87,85 88,86 89,87 90,88 91,89 92,90 93,91 93,92 94,93 95,94 96,95 97,96 98,96 99,97 100,98 101,99 102,100 103,101 104,102 105,103 106,104 107,105 108,106 109,107 110,108 111,109 112,110 113,111 114,112 115,113 115,114 116,115 117,116 118,117 119,118 120,119 121,120 122,121 122,122 123,123 124,124 125,125 126,126 127,127 128,127 129,128 130,129 131,129 132,130 133,131 134,132 135,133 136,134 137,135 138,136 139,137 140,138 141,139 142,140 143,141 144,142 145,142 146,143 147,144 148,145 149,146 150,146 151,147 152,148 152,149 153,150 154,151 155,152 156,153 157,154 158,155 159,156 159,157 160,158 161,159 162,160 163,161 163,162 164,163 165,164 166,165 167,166 168,167 169,168 170,169 171,170 172,171 173,172 174,173 175,174 176,175 176,176 177,177 178,177 179,178 180,179 181,179 182,180 183,181 184,182 185,183 186,184 187,185 188,186 189,187 190,188 191,189 192,190 193,191 194,192 195,193 196,194 197,195 198,196 199,197 200,198 201,199 202,200 203,201 204,202 205,203 206,204 207,205 208,206 208,207 209,208 210,209 211,210 212,210 213,211 214,212 215,213 215,214 216,215 217,216 218,217 219,217 220,218 221,219 222,220 223,221 224,222 225,223 226,224 227,225 228,226 229,227 230,228 231,229 232,230 232,231 233,232 234,233 235,234 235,235 236,236 237,237 238,238 239,239 240,239 241,240 241,241 242,242 243,243 244,244 245,245 246,246 247,247 248,248 249,249 250,250 251,251 252,252 253,253 254,253 255,254 256,255 257,255 258,256 259,257 260,258 261,259 262,260 263,261 264,262 265,263 266,264 267,264 268,265 268,266 268,267 269,268 270,269 271,270 272,271 273,272 274,273 275,274 276,275 277,276 278,277 278,278 279,279 280,280 281,281 282,282 283,283 284,283 285,284 286,285 287,286 288,287 289,288 290,289 291,289 292,290 293,291 294,292 295,293 296,294 297,295 297,296 298,297 298,298 299,299 300,300 300,301 301,302 302,303 303,304 304,305 305,306 306,307 307,308 308,309 309,310 310,311 311,312 312,313 313,314 314,315 315,315 316,315 317,316 318,316 319,317 320,317 321,318 322,319 323,320 323,321 323,322 324,323 325,324 326,325 326,326 327,327 328,327 329,328 330,329 331,330 332,330 333,331 334,332 335,333 335,334 336,335 337,336 338,337 339,338 340,339 341,340 342,341 343,342 344,343 345,344 346,345 347,346 348,347 349,347 350,348 351,349 352,350 353,350 354,351 354,352 355,353 355,354 356,355 357,356 358,357 359,358 360,359 361,360 362,361 363,362 364,363 364,364 365,365 366,366 367,367 368,368 369,369 370,370 371,371 372,371 373,371 374,372 375,373 376,374 377,375 378,376 379,377 380,378 380,379 381,380 382,381 383,382 384,382 385,383 386,384 387,385 388,386 389,387 390,388 391,389 392,390 393,391 394,392 395,393 396,394 397,395 398,396 399,397 400,398 401,399 402,399 403,400 404,401 405,402 406,403 407,404 408,405 409,406 410,407 410,408 411,409 412,410 413,411 414,412 415,413 416,414 417,415 418,416 419,417 420,417 421,418 422,419 423,420 424,421 425,422 425,423 425,424 426,425 427,426 428,427 429,428 430,429 431,429 432,430 433,431 434,432 434,433 435,434 436,435 437,436 438,437 439,438 440,439 441,440 442,441 443,442 444,443 445,444 446,444 447,445 448,446 449,447 450,448 450,449 451,450 452,451 453,452 454,453 455,454 456,454 457,455 458,456 459,456 460,456 461,457 462,458 463,459 464,460 465,461 466,462 467,463 468,464 469,465 469,466 470,467 471,468 472,469 473,470 474,471 475,472 476,473 477,474 478,475 478,476 479,477 480,478 481,479 482,480 483,481 483,482 484,483 485,484 485,485 486,486 487,487 488,488 489,489 490,490 491,491 492,491 493,492 494,493 495,494 496,495 497,496 498,497 499,498 500,499 501,500 502,501 503,502 504,503 505,504 506,505 507,506 508,507 509,508 510,509 511,510 511,511 512,512 513,513 514,513 515,514 516,514 517,515 518,516 518,517 519,518 520,519 521,520 522,521 523,522 524,523 524,524 525,525 526,526 527,527 528,527 529,528 530,529 530,530 531,531 532,532 533,533 534,534 535,535 536,536 537,537 538,538 539,539 540,540 541,541 542,542 543,543 544,543 545,544 546,545 547,546 548,546 549,547 550,548 550,549 551,550 552,551 553,552 554,553 555,554 556,555 557,556 558,557 559,558 560,559 561,560 562,561 563,562 564,563 565,564 566,565 567,565 568,565 569,565 570,566 571,567 572,568 572,569 573,570 573,571 573,572 574,573 574,574 575,575 576,576 577,577 578,578 579,579 580,580 581,581 582,582 583,583 584,584 585,585 586,586 587,587 588,588 589,589 590,590 591,591 592,592 593,593 594,593 595,594 596,595 597,596 598,597 599,598 600,599 601,600 602,601 603,602 604,603 605,604 605,605 606,605 607,606 608,607 609,608 610,609 611,609 612,610 613,611 614,612 615,613 616,614 617,615 618,616 619,616 620,617 621,618 622,619 623,620 624,621 625,621 626,622 627,623 628,624 628,625 629,626 630,627 631,628 631,629 631,630 632,631 633,632 634,633 635,634 636,635 637,635 638,636 639,637 640,638 640,639 641,640 642,641 643,642 644,643 645,644 646,645 647,646 648,647 649,648 650,649 651,649 652,650 653,651 654,652 655,653 656,654 657,655 658,656 659,657 660,658 661,659 661,660 662,661 663,662 664,663 665,664 666,665 667,666 668,667 669,668 670,669 671,670 672,671 673,672 674,673 675,674 676,674 677,675 678,676 678,677 679,678 679,679 680,680 681,681 682,682 683,683 684,684 685,685 686,686 687,686 688,687 689,687 690,688 691,688 692,689 692,690 693,691 694,692 695,693 696,694 697,695 698,696 699,697 700,698 701,699 702,700 703,701 704,702 705,703 706,704 707,705 708,706 708,707 709,708 710,709 711,710 712,710 712,711 713,712 714,713 715,714 716,715 717,716 718,717 719,717 720,718 721,719 722,720 723,721 724,722 725,723 726,724 727,725 728,726 729,727 730,728 730,729 731,730 732,731 733,732 734,733 735,734 736,735 737,736 737,737 737,738 737,739 738,740 739,741 740,742 741,743 742,744 743,744 744,745 745,746 746,747 747,748 748,749 749,749 750,750 751,750 752,751 753,752 754,753 755,754 756,755 757,755 758,756 758,757 759,758 760,759 761,760 762,761 763,762 764,763 765,764 766,765 767,766 768,767 769,768 770,768 771,769 772,769 772,770 773,771 774,771 775,772 775,773 776,774 777,775 778,776 779,777 780,778 780,779 781,780 782,781 783,782 784,783 785,784 786,785 787,786 788,787 789,788 790,789 791,790 792,791 793,792 794,793 795,794 796,795 797,796 798,797 799,798 800,799 800,800 801,801 802,802 803,803 804,804 805,805 806,805 807,806 808,807 809,808 810,809 811,810 812,811 813,812 814,813 815,814 816,815 817,816 818,817 819,818 820,819 821,820 822,821 822,822 823,823 824,824 825,825 825,826 826,827 827,828 828,829 829,830 830,831 831,832 832,833 833,834 834,835 835,836 836,837 837,838 838,839 839,840 840,841 841,842 842,843 843,844 844,845 845,846 846,847 847,848 848,849 849,850 850,851 851,852 852,853 853,854 854,854 855,855 856,856 857,856 858,857 859,858 860,859 861,860 862,861 863,862 864,863 865,863 866,864 867,865 867,866 868,867 869,868 870,869 871,870 872,871 873,872 874,873 875,874 876,875 877,876 878,877 879,878 880,879 881,880 882,881 883,882 884,882 885,883 886,884 887,885 887,886 888,887 889,888 890,889 891,890 892,890 893,891 894,892 894,893 895,894 896,894 897,895 898,896 899,897 900,898 901,899 902,900 903,901 904,902 905,903 905,904 906,905 907,906 908,907 909,908 910,908 911,909 911,910 912,911 913,912 914,913 915,914 916,915 917,916 918,917 919,918 920,919 921,920 921,921 922,922 923,923 924,924 925,925 926,926 927,926 928,927 929,927 930,928 931,929 932,930 933,931 933,932 934,933 935,934 936,934 937,935 938,936 939,937 940,938 941,939 942,939 943,940 944,941 944,942 945,943 946,944 947,945 948,946 949,947 950,948 950,949 951,950 952,951 953,952 954,953 955,954 956,954 957,955 957,956 958,957 959,958 959,959 960,960 961,960 962,961 963,962 964,963 965,964 965,965 966,966 967,967 968,967 969,968 970,969 971,970 972,971 972,972 973,973 974,974 975,975 976,976 977,977 978,978 979,979 980,980 981,981 982,982 983,983 984,983 985,984 985,985 985,986 986,987 987,988 988,989 989,990 990,991 991,992 991,993 992,994 993,994 994,994 995,995 996,996 997,996 998,997");
        int myresult = Utility.calculateCost(list, 14, 10);
        list = Utility.generateListCoordinatesFromString("4,4 3,4 2,3 2,2 1,1");
        int expectedresult = Utility.calculateCost(list, 34, 10);
        System.out.print("myresult:"+myresult+" expected:"+expectedresult);

        //System.out.print(Utility.findShortestDistance(new Coordinate(4, 0), new Coordinate(2, 1)));
        testAStar("/Users/nishatiwari/CSCI561/src/com/com.HW1/AStar/");
        testBFS("/Users/nishatiwari/CSCI561/src/com/com.HW1/BFS/");
        testUCS("/Users/nishatiwari/CSCI561/src/com/com.HW1/UCS/");
    }

    private static void testAStar(String s) {
        try {
            final File folder = new File(s);
            for (final File fileEntry : folder.listFiles()) {
                Input input = Utility.readFileForTest(s + fileEntry.getName());
                System.out.println(fileEntry.getName());
                homework.TestCode(input);
                BufferedReader bf = new BufferedReader(new FileReader("/Users/nishatiwari/CSCI561/output.txt"));
                int count=0;
                List<String> outputFromCode= new ArrayList<>();
                while(count!=input.targets.size())
                {
                    outputFromCode.add(bf.readLine());
                    count++;
                }
                assert outputFromCode.size() == input.output.size();
                for (int i = 0; i < outputFromCode.size(); i++) {
                    if(!outputFromCode.get(i).equals("FAIL"))
                        assert outputFromCode.get(i).equals(input.output.get(i)) ? true : (Utility.calculateCost(Utility.generateListCoordinatesFromString(outputFromCode.get(i)),14, 10) == Utility.calculateCost(Utility.generateListCoordinatesFromString(input.output.get(i)), 14, 10, input.elevationMap))&& (Utility.isConstraintSatisfied(Utility.generateListCoordinatesFromString(outputFromCode.get(i)), input.elevationMap, input.maxElevation));
                }
            }
        } catch (Exception e) {
            System.out.println("Error occurred "+e);
        }
    }

    private static void testBFS(String s) {
        try {
            final File folder = new File(s);
            for (final File fileEntry : folder.listFiles()) {
                Input input = Utility.readFileForTest(s + fileEntry.getName());
                System.out.println(fileEntry.getName());
                homework.TestCode(input);
                BufferedReader bf = new BufferedReader(new FileReader("/Users/nishatiwari/CSCI561/output.txt"));
                int count=0;
                List<String> outputFromCode= new ArrayList<>();
                while(count!=input.targets.size())
                {
                    outputFromCode.add(bf.readLine());
                    count++;
                }
                assert outputFromCode.size() == input.output.size();
                for (int i = 0; i < outputFromCode.size(); i++) {
                    assert outputFromCode.get(i).equals(input.output.get(i)) ? true : (Utility.calculateCost(Utility.generateListCoordinatesFromString(outputFromCode.get(i)),14, 10) == Utility.calculateCost(Utility.generateListCoordinatesFromString(input.output.get(i)), 14, 10))&& (Utility.isConstraintSatisfied(Utility.generateListCoordinatesFromString(outputFromCode.get(i)), input.elevationMap, input.maxElevation));
                }

            }
        } catch (Exception e) {
            System.out.println("Error occurred "+e);

        }
    }

    private static void testUCS(String s) {
        try {
            final File folder = new File(s);
            for (final File fileEntry : folder.listFiles()) {
                Input input = Utility.readFileForTest(s + fileEntry.getName());
                System.out.println(fileEntry.getName());
                homework.TestCode(input);
                BufferedReader bf = new BufferedReader(new FileReader("/Users/nishatiwari/CSCI561/output.txt"));
                int count=0;
                List<String> outputFromCode= new ArrayList<>();
                while(count!=input.targets.size())
                {
                    outputFromCode.add(bf.readLine());
                    count++;
                }
                assert outputFromCode.size() == input.output.size();
                for (int i = 0; i < outputFromCode.size(); i++) {
                    assert outputFromCode.get(i).equals(input.output.get(i)) ? true : (Utility.calculateCost(Utility.generateListCoordinatesFromString(outputFromCode.get(i)),14, 10) == Utility.calculateCost(Utility.generateListCoordinatesFromString(input.output.get(i)), 14, 10))&& (Utility.isConstraintSatisfied(Utility.generateListCoordinatesFromString(outputFromCode.get(i)), input.elevationMap, input.maxElevation));
                }

            }
        } catch (Exception e) {
            System.out.println("Error occurred "+e);
        }
    }
}
